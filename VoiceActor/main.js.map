{
  "version": 3,
  "sources": ["main.ts"],
  "sourcesContent": ["    import { App, Editor, MarkdownView, Notice, Plugin, PluginSettingTab, Setting, TFile, moment } from \"obsidian\";\n\n    type ProviderKind = \"webspeech\" | \"piper\";\n\n    interface VoiceActorSettings {\n      provider: ProviderKind;\n      outDir: string;                 // vault-relative folder for audio\n      rate: number;                   // generic rate factor (1.0 normal)\n      webSpeechVoiceName: string;     // voice name to pick from window.speechSynthesis\n      piperBinaryPath: string;        // e.g. /usr/bin/piper\n      piperModelPath: string;         // default model if no mapping\n      piperLengthScale: number;       // speed control for Piper\n      piperNoiseScale: number;        // timbre variation\n      piperNoiseW: number;            // breathiness\n      voiceMap: Record<string, string>; // NPC name -> piper model path\n      autoEmbedAfterRender: boolean;  // insert the created audio into the note\n    }\n\n    const DEFAULT_SETTINGS: VoiceActorSettings = {\n      provider: \"piper\",\n      outDir: \"Audio\",\n      rate: 1.0,\n      webSpeechVoiceName: \"\",\n      piperBinaryPath: \"\",\n      piperModelPath: \"\",\n      piperLengthScale: 1.0,\n      piperNoiseScale: 0.667,\n      piperNoiseW: 0.333,\n      voiceMap: {},\n      autoEmbedAfterRender: true,\n    };\n\n    export default class VoiceActorPlugin extends Plugin {\n      settings: VoiceActorSettings = { ...DEFAULT_SETTINGS };\n\n      async onload() {\n        await this.loadSettings();\n\n        this.addRibbonIcon(\"mic-2\", \"Voice Actor: Speak Selection\", async () => {\n          await this.speakSelection();\n        });\n\n        this.addCommand({\n          id: \"voice-actor-speak-selection\",\n          name: \"Speak Selection Now\",\n          editorCallback: async (_editor, _view) => {\n            await this.speakSelection();\n          },\n        });\n\n        this.addCommand({\n          id: \"voice-actor-render-selection\",\n          name: \"Render Selection to Audio File\",\n          editorCallback: async (_editor, _view) => {\n            await this.renderSelectionToFile();\n          },\n        });\n\n        this.addCommand({\n          id: \"voice-actor-batch-render-note\",\n          name: \"Batch Render Dialogues in Note\",\n          callback: async () => {\n            await this.batchRenderNote();\n          },\n        });\n\n        this.addSettingTab(new VoiceActorSettingTab(this.app, this));\n        console.log(\"[Voice Actor] loaded\");\n      }\n\n      onunload() {\n        console.log(\"[Voice Actor] unloaded\");\n      }\n\n      async loadSettings() {\n        const data = await this.loadData();\n        this.settings = Object.assign({}, DEFAULT_SETTINGS, data);\n      }\n\n      async saveSettings() {\n        await this.saveData(this.settings);\n      }\n\n      // ========== COMMAND IMPLEMENTATIONS ==========\n\n      private getActiveMarkdown(): MarkdownView | null {\n        return this.app.workspace.getActiveViewOfType(MarkdownView) ?? null;\n      }\n\n      private getSelection(): string | null {\n        const view = this.getActiveMarkdown();\n        if (!view) return null;\n        const sel = view.editor.getSelection();\n        if (sel && sel.trim().length > 0) return sel;\n        // fall back to current line\n        const line = view.editor.getLine(view.editor.getCursor().line) ?? \"\";\n        return line.trim().length > 0 ? line : null;\n      }\n\n      private async speakSelection() {\n        const text = this.getSelection();\n        if (!text) {\n          new Notice(\"Voice Actor: No selection or current line to speak.\");\n          return;\n        }\n\n        if (this.settings.provider === \"webspeech\") {\n          const ok = await speakWithWebSpeech(text, this.settings.webSpeechVoiceName, this.settings.rate);\n          if (!ok) new Notice(\"Web Speech is not available or no matching voice.\");\n          return;\n        }\n\n        // Piper without saving would be odd; so save a tmp file and play it.\n        try {\n          const outPath = await this.renderToVaultFile(text, this.settings.piperModelPath);\n          await this.playVaultAudio(outPath);\n        } catch (err) {\n          console.error(err);\n          new Notice(\"Voice Actor: Piper failed to speak selection.\");\n        }\n      }\n\n      private async renderSelectionToFile() {\n        const text = this.getSelection();\n        if (!text) {\n          new Notice(\"Voice Actor: No selection or current line to render.\");\n          return;\n        }\n        if (this.settings.provider !== \"piper\") {\n          new Notice(\"Rendering to file requires Piper provider.\");\n          return;\n        }\n        try {\n          const outPath = await this.renderToVaultFile(text, this.settings.piperModelPath);\n          if (this.settings.autoEmbedAfterRender) {\n            await this.embedAudioAtCursor(outPath);\n          }\n          await this.playVaultAudio(outPath);\n          new Notice(`Voice Actor: Rendered \u2192 ${outPath}`);\n        } catch (err) {\n          console.error(err);\n          new Notice(\"Voice Actor: failed to render audio.\");\n        }\n      }\n\n      private async batchRenderNote() {\n        if (this.settings.provider !== \"piper\") {\n          new Notice(\"Batch rendering requires Piper provider.\");\n          return;\n        }\n\n        const view = this.getActiveMarkdown();\n        if (!view) {\n          new Notice(\"Open a markdown note first.\");\n          return;\n        }\n\n        const text = view.editor.getValue();\n        const frontVoices = extractFrontmatterVoices(text);\n        const lines = text.split(/\\r?\\n/);\n        const dialogueRegex = /^(?:\\*\\*(.+?)\\*\\*|([A-Za-z][\\w\\s'.-]+))\\s*[:\uFF1A]\\s*(.+)$/;\n\n        let rendered = 0;\n        for (let i = 0; i < lines.length; i++) {\n          const m = lines[i].match(dialogueRegex);\n          if (!m) continue;\n          const speaker = (m[1] || m[2] || \"\").trim();\n          const utterance = m[3].trim();\n            console.log(\"Line matched:\", lines[i]);\n            console.log(\"Parsed speaker:\", speaker);\n            console.log(\"Frontmatter voices map:\", frontVoices);\n            if (!utterance) continue;\n\n          const model = frontVoices[speaker] || this.settings.voiceMap[speaker] || this.settings.piperModelPath;\n          if (!model) {\n            console.warn(`No model for speaker \"${speaker}\", skipping.`);\n            continue;\n          }\n\n          try {\n            const outPath = await this.renderToVaultFile(utterance, model, speaker);\n            if (this.settings.autoEmbedAfterRender) {\n              // append embed line after the dialogue line\n              const embedLine = `![[${outPath}]]`;\n              insertLineAfter(view, i, embedLine);\n              i++; // skip past the inserted line\n            }\n            rendered++;\n          } catch (e) {\n            console.error(e);\n            new Notice(`Failed to render line for ${speaker}`);\n          }\n        }\n\n        if (rendered === 0) new Notice(\"Voice Actor: No dialogue lines found or rendered.\");\n        else new Notice(`Voice Actor: Rendered ${rendered} line(s).`);\n      }\n\n      // ========== CORE HELPERS ==========\n\n      /** Render text to a WAV file inside the vault and return the vault-relative path */\n      private async renderToVaultFile(text: string, modelPath: string, speaker?: string): Promise<string> {\n        if (!this.settings.piperBinaryPath) throw new Error(\"Piper binary path not set.\");\n        if (!modelPath) throw new Error(\"Piper model path not set.\");\n\n        const fileNameBase = sanitizeFileName(\n          (speaker ? `${speaker}-` : \"\") + text.slice(0, 42) + \"-\" + moment().format(\"YYYYMMDD-HHmmss\")\n        );\n        const relDir = this.settings.outDir.replace(/^\\/+/, \"\");\n        const relPath = `${relDir}/${fileNameBase}.wav`;\n\n        // Ensure folder exists\n        await this.ensureFolder(relDir);\n\n        // Get absolute file system path for Piper output\n        const abs = await this.getAbsolutePathInVault(relPath);\n        await runPiperToFile({\n          binary: this.settings.piperBinaryPath,\n          model: modelPath,\n          text,\n          outfileAbs: abs,\n          lengthScale: this.settings.piperLengthScale,\n          noiseScale: this.settings.piperNoiseScale,\n          noiseW: this.settings.piperNoiseW,\n        });\n\n        // Let Obsidian know the file now exists (if not already)\n        const existing = this.app.vault.getAbstractFileByPath(relPath);\n        if (!existing) {\n          // create an empty file so it appears; Piper already wrote the WAV to disk\n          await this.app.vault.createBinary(relPath, new ArrayBuffer(0));\n        } else if (existing instanceof TFile) {\n          // touch file to refresh\n          await this.app.vault.modifyBinary(existing, new ArrayBuffer(0));\n        }\n\n        return relPath;\n      }\n\n      private async ensureFolder(folder: string) {\n        if (!(await this.app.vault.adapter.exists(folder))) {\n          await this.app.vault.createFolder(folder);\n        }\n      }\n\n      private async getAbsolutePathInVault(relPath: string): Promise<string> {\n        const adapter: any = this.app.vault.adapter;\n        if (typeof adapter.getBasePath !== \"function\") {\n          throw new Error(\"Voice Actor: Only supported on desktop vaults (FileSystemAdapter).\");\n        }\n        const base: string = adapter.getBasePath();\n        // We cannot rely on node's 'path' types here; build a safe path manually\n        const join = (a: string, b: string) => (a.endsWith(\"/\") ? a.slice(0, -1) : a) + \"/\" + (b.startsWith(\"/\") ? b.slice(1) : b);\n        return join(base, relPath);\n      }\n\n      private async playVaultAudio(relPath: string) {\n        const file = this.app.vault.getAbstractFileByPath(relPath);\n        if (!(file instanceof TFile)) return;\n        const src = this.app.vault.getResourcePath(file);\n        const audio = new Audio(src);\n        await audio.play().catch(() => {});\n      }\n\n      private async embedAudioAtCursor(relPath: string) {\n        const view = this.getActiveMarkdown();\n        if (!view) return;\n        const embed = `![[${relPath}]]`;\n        view.editor.replaceSelection(embed + \"\\n\");\n      }\n    }\n\n    // ========== SETTINGS TAB ==========\n\n    class VoiceActorSettingTab extends PluginSettingTab {\n      plugin: VoiceActorPlugin;\n\n      constructor(app: App, plugin: VoiceActorPlugin) {\n        super(app, plugin);\n        this.plugin = plugin;\n      }\n\n      display(): void {\n        const { containerEl } = this;\n        containerEl.empty();\n        containerEl.createEl(\"h2\", { text: \"Voice Actor \u2014 Settings\" });\n\n        new Setting(containerEl)\n          .setName(\"Provider\")\n          .setDesc(\"Choose the TTS backend. Piper can render to files; Web Speech can only play live.\")\n          .addDropdown((dd) => {\n            dd.addOption(\"piper\", \"Piper (local, recommended)\");\n            dd.addOption(\"webspeech\", \"Web Speech (live playback)\");\n            dd.setValue(this.plugin.settings.provider);\n            dd.onChange(async (v: ProviderKind) => {\n              this.plugin.settings.provider = v;\n              await this.plugin.saveSettings();\n              this.display();\n            });\n          });\n\n        new Setting(containerEl)\n          .setName(\"Output folder (in vault)\")\n          .setDesc(\"Where WAV files are saved (vault-relative).\")\n          .addText((t) => {\n            t.setPlaceholder(\"Audio\").setValue(this.plugin.settings.outDir);\n            t.onChange(async (v) => {\n              this.plugin.settings.outDir = v.trim() || \"Audio\";\n              await this.plugin.saveSettings();\n            });\n          });\n\n        new Setting(containerEl)\n          .setName(\"Generic rate\")\n          .setDesc(\"1.0 is normal; affects Web Speech. Piper speed is controlled by Length Scale below.\")\n          .addSlider((s) => {\n            s.setLimits(0.5, 2.0, 0.05).setDynamicTooltip().setValue(this.plugin.settings.rate);\n            s.onChange(async (v) => {\n              this.plugin.settings.rate = v;\n              await this.plugin.saveSettings();\n            });\n          });\n\n        if (this.plugin.settings.provider === \"webspeech\") {\n          new Setting(containerEl)\n            .setName(\"Web Speech: voice name\")\n            .setDesc(\"Exact voice name to use (depends on your system). Leave empty for default.\")\n            .addText((t) => {\n              t.setPlaceholder(\"e.g. English (Great Britain)\")\n                .setValue(this.plugin.settings.webSpeechVoiceName || \"\");\n              t.onChange(async (v) => {\n                this.plugin.settings.webSpeechVoiceName = v;\n                await this.plugin.saveSettings();\n              });\n            });\n        } else {\n          containerEl.createEl(\"h3\", { text: \"Piper Settings\" });\n          new Setting(containerEl)\n            .setName(\"Piper binary path\")\n            .setDesc(createCodeDesc(\"Example: /usr/bin/piper\"))\n            .addText((t) => {\n              t.setPlaceholder(\"/usr/bin/piper\")\n                .setValue(this.plugin.settings.piperBinaryPath);\n              t.onChange(async (v) => {\n                this.plugin.settings.piperBinaryPath = v;\n                await this.plugin.saveSettings();\n              });\n            });\n\n          new Setting(containerEl)\n            .setName(\"Default model path\")\n            .setDesc(createCodeDesc(\"Used when no voice is mapped. Example: /home/you/models/en_US-amy-medium.onnx\"))\n            .addText((t) => {\n              t.setPlaceholder(\"/path/to/voice.onnx\")\n                .setValue(this.plugin.settings.piperModelPath);\n              t.onChange(async (v) => {\n                this.plugin.settings.piperModelPath = v;\n                await this.plugin.saveSettings();\n              });\n            });\n\n          new Setting(containerEl)\n            .setName(\"Length scale\")\n            .setDesc(\"Lower is faster speech (Piper).\")\n            .addSlider((s) => {\n              s.setLimits(0.5, 2.0, 0.05).setDynamicTooltip().setValue(this.plugin.settings.piperLengthScale);\n              s.onChange(async (v) => {\n                this.plugin.settings.piperLengthScale = v;\n                await this.plugin.saveSettings();\n              });\n            });\n\n          new Setting(containerEl)\n            .setName(\"Noise scale\")\n            .setDesc(\"Timbre variation (Piper).\")\n            .addSlider((s) => {\n              s.setLimits(0.1, 1.2, 0.01).setDynamicTooltip().setValue(this.plugin.settings.piperNoiseScale);\n              s.onChange(async (v) => {\n                this.plugin.settings.piperNoiseScale = v;\n                await this.plugin.saveSettings();\n              });\n            });\n\n          new Setting(containerEl)\n            .setName(\"Noise W\")\n            .setDesc(\"Breathiness (Piper).\")\n            .addSlider((s) => {\n              s.setLimits(0.0, 1.0, 0.01).setDynamicTooltip().setValue(this.plugin.settings.piperNoiseW);\n              s.onChange(async (v) => {\n                this.plugin.settings.piperNoiseW = v;\n                await this.plugin.saveSettings();\n              });\n            });\n\n          containerEl.createEl(\"h3\", { text: \"Voice Map (speaker \u2192 model path)\" });\n          const mapPre = containerEl.createEl(\"pre\", { cls: \"voice-actor-setting\" });\n          const ta = mapPre.createEl(\"textarea\");\n          ta.style.width = \"100%\";\n          ta.style.height = \"160px\";\n          ta.value = JSON.stringify(this.plugin.settings.voiceMap, null, 2);\n          ta.onchange = async () => {\n            try {\n              this.plugin.settings.voiceMap = JSON.parse(ta.value);\n              await this.plugin.saveSettings();\n              new Notice(\"Voice map saved.\");\n            } catch {\n              new Notice(\"Invalid JSON for voice map.\");\n            }\n          };\n\n          new Setting(containerEl)\n            .setName(\"Auto-embed after render\")\n            .setDesc(\"Insert a ![[audio.wav]] after creating audio.\")\n            .addToggle((tg) => {\n              tg.setValue(this.plugin.settings.autoEmbedAfterRender);\n              tg.onChange(async (v) => {\n                this.plugin.settings.autoEmbedAfterRender = v;\n                await this.plugin.saveSettings();\n              });\n            });\n        }\n      }\n    }\n\n    function createCodeDesc(sample: string) {\n      const frag = document.createDocumentFragment();\n      frag.append(\"Example: \");\n      const code = document.createElement(\"code\");\n      code.textContent = sample;\n      frag.appendChild(code);\n      return frag;\n    }\n\n// ========== UTILS & BACKENDS ==========\n\n  function sanitizeFileName(s: string): string {\n    return s.replace(/[\\\\/:*?\"<>|#^\\[\\];]+/g, \"_\").trim();\n  }\n  function insertLineAfter(view: MarkdownView, idx: number, content: string) {\n    const editor = view.editor;\n    const line = editor.getLine(idx);\n    const pos = { line: idx, ch: (line ?? \"\").length };\n    editor.replaceRange(\"\\n\" + content, pos);\n  }\n  function extractFrontmatterVoices(text: string): Record<string, string> {\n  const fm = text.match(/^---\\s*\\n([\\s\\S]*?)\\n---/);\n  if (!fm) return {};\n  try {\n    const block = fm[1];\n    const lines = block.split(/\\r?\\n/);\n    const out: Record<string, string> = {};\n    let inVoices = false;\n    for (const ln of lines) {\n      const clean = ln.trimEnd();\n      if (!inVoices) {\n        if (/^voices\\s*:/i.test(clean)) inVoices = true;\n      } else {\n        const m = clean.match(/^\\s*(\"?)(.+?)\\1\\s*:\\s*(.+)$/);\n        if (m) {\n          const k = m[2].trim();\n          const v = m[3].trim();\n          out[k] = v;\n        } else if (/^\\S/.test(clean)) {\n          // stop if we hit a non-indented line\n          break;\n          }\n        }\n      }\n      return out;\n    } catch {\n      return {};\n    }\n  }\n  async function speakWithWebSpeech(text: string, voiceName: string, rate: number): Promise<boolean> {\n    const w = window as any;\n    const synth: SpeechSynthesis | undefined = w.speechSynthesis;\n    if (!synth) return false;\n    const utter = new SpeechSynthesisUtterance(text);\n    utter.rate = Math.max(0.5, Math.min(2.0, rate));\n    if (voiceName) {\n      const voices = synth.getVoices();\n      const v = voices.find((vv) => vv.name === voiceName);\n      if (v) utter.voice = v;\n    }\n    try {\n      synth.speak(utter);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  interface PiperJob {\n    binary: string;\n    model: string;\n    text: string;\n    outfileAbs: string;\n    lengthScale: number;\n    noiseScale: number;\n    noiseW: number;\n  }\n  async function runPiperToFile(job: PiperJob): Promise<void> {\n    return new Promise((resolve, reject) => {\n      // Use Node child_process from Electron renderer (desktop only)\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { spawn } = (window as any).require(\"child_process\");\n      const args = [\n        \"--model\", job.model,\n        \"--output_file\", job.outfileAbs,\n        \"--length_scale\", String(job.lengthScale),\n        \"--noise_scale\", String(job.noiseScale),\n        \"--noise_w\", String(job.noiseW),\n      ];\n      const child = spawn(job.binary, args);\n\n      // send text to Piper via stdin\n      child.stdin.write(job.text + \"\\n\");\n      child.stdin.end();\n      let stderr = \"\";\n      child.stderr.on(\"data\", (d: Buffer) => stderr += d.toString());\n      child.on(\"error\", (err: any) => reject(err));\n      child.on(\"close\", (code: number) => {\n        if (code === 0) resolve();\n        else reject(new Error(`piper exited ${code}: ${stderr}`));\n      });\n    });\n  }\n"],
  "mappings": "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",
  "names": []
}
